import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# 生成模拟数据（与图中分布特征一致）
def density():
    list = [98503016.75,112574876.3,112574876.3,112574876.3,112574876.3,126646735.8,126646735.8,126646735.8,126646735.8,126646735.8,126646735.8,140718595.4,140718595.4,140718595.4,140718595.4,140718595.4,140718595.4,154790454.9,154790454.9,154790454.9,154790454.9,154790454.9,154790454.9,154790454.9,168862314.4,168862314.4,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,182934174,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,197006033.5,211077893,211077893,211077893,211077893,211077893,211077893,211077893,211077893,211077893,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,225149752.6,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,239221612.1,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,253293471.6,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,267365331.2,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,281437190.7,295509050.3,295509050.3,295509050.3,295509050.3,295509050.3,295509050.3,295509050.3,295509050.3,295509050.3,309580909.8,309580909.8,309580909.8,309580909.8,309580909.8,309580909.8,309580909.8,323652769.3,323652769.3,337724628.9,337724628.9,337724628.9,337724628.9,337724628.9,351796488.4,365868347.9,365868347.9,365868347.9,379940207.5,379940207.5,379940207.5,379940207.5,379940207.5,394012067,408083926.5,408083926.5,422155786.1,422155786.1,422155786.1,436227645.6,436227645.6,436227645.6,436227645.6,436227645.6,450299505.1,450299505.1,464371364.7,478443224.2,492515083.8,506586943.3,520658802.8,520658802.8,534730662.4,534730662.4,548802521.9,562874381.4,576946241,858383431.7,900599010.3,914670869.8]
    new_list=[91436923.66690922, 10805537.02793157, 112366559.76274848, 116222674.28081697, 102149220.18829666, 133302893.72904278, 147184582.9977706, 148915353.3813117, 126023948.60774961, 125797107.96714012, 151320203.04448727, 136047440.19768372, 129118698.72773196, 119325454.15584172, 120724517.57921447, 129584729.27395763, 156808104.41662565, 184269748.06133425, 160311529.5991007, 156181939.15980232, 179323758.89062437, 108936249.36929435, 178094554.27544156, 126670610.17791821, 181591247.82321274, 195344697.72418317, 109824642.36684194, 184121181.66762522, 195463046.4648328, 197603689.05763552, 206789356.4498779, 208976056.44735318, 149535967.2594598, 161106637.92867336, 217724162.60486636, 192388724.69070604, 157090538.51621425, 152138627.1626767, 206063103.14999416, 177537500.08441547, 189604839.6139868, 166768421.81507495, 212839540.00141326, 158611202.303591, 165512429.53182766, 214518620.97240224, 193047538.70595598, 163534603.97749445, 210253254.65473664, 233651506.56123558, 187771279.00693172, 228191847.07651764, 217268578.8056871, 184978321.35973206, 228251421.77018058, 188390374.13744068, 232798229.77546474, 174684186.75462326, 172960601.02652657, 226418405.20782465, 218166754.17581305, 237325884.46659902, 236664987.03900304, 183506052.19628078, 177814050.8798642, 175697438.7681955, 183609509.58045125, 204653655.58310425, 192133208.85373658, 195910017.77408078, 218027890.94240344, 217368205.72820503, 214306423.18022773, 262731210.56896713, 225711030.43620357, 221692569.9339525, 247274294.00174922, 199288486.15413758, 190858015.72196466, 219745552.60448036, 224088017.36007327, 217518791.2678841, 202345644.89764532, 199427372.47629246, 256360726.56806755, 245238984.9014296, 181993048.82360527, 244056208.72535586, 269901083.47945356, 269612200.80451834, 283578114.58985126, 273831265.2663324, 261913477.78998715, 268515264.91835934, 257572939.5949888, 233236924.9740534, 253677777.03337052, 267147286.62655708, 222927551.52616516, 254337130.21978864, 254776309.30246598, 247389528.79685184, 252881694.38068214, 215658111.95174125, 271270447.0945656, 257762586.9059859, 206599572.76164576, 231727027.76115417, 235072488.18766096, 241290566.26911482, 287712039.55397385, 300502808.08113796, 258912379.68513998, 224144708.7106725, 314656347.71264774, 288280455.9816774, 302776510.18538415, 314140149.0259356, 225697041.15860412, 216839561.21851358, 320014809.39276296, 336271377.37549, 272494522.82178277, 232310560.08779797, 296459685.54225, 263992399.41130093, 275035522.771995, 238135493.58659494, 244383291.68383655, 309005008.00321394, 320267452.1584939, 261593912.02991414, 314021228.9234868, 293756261.3079204, 276452022.0268243, 307781235.0051992, 332199824.663157, 265793912.9549028, 295000837.44576263, 301481065.4881508, 283802945.8359635, 257575583.52985698, 316787346.41306376, 330886063.74492073, 342388619.52456266, 334880864.52539814, 283839783.2162547, 282071761.756213, 261990451.73042226, 300710736.14317757, 325084978.44557875, 322936325.7818636, 299819515.6386889, 287289025.97015727, 284422289.2848731, 335041996.48456556, 362359899.52922523, 401657951.4321428, 413889530.9099354, 446094843.5712689, 410746793.5207827, 431275196.3886335, 400470785.17410797, 434831895.95276606, 411692240.06241983, 440124774.89233166, 403080123.43123823, 467752099.88501203, 355021717.4329809, 464762154.98961157, 445754765.047586, 429646772.20695746, 370156443.36288047, 356163348.02860004, 433462356.6766991, 434218864.99367976, 362984430.45561, 387006158.77595866, 533593660.2046035, 584332559.6427662, 535886983.2986711, 428648262.07689756, 481576217.8206178, 513655045.5812044, 524025333.0460091, 527232328.2552128, 559709089.4624795, 512596086.68407124, 808661140.2505263, 1039777734.5349226, 794880692.8323224]

    x=np.array(list)
    y=np.array(new_list)
    plt.figure(figsize=(10, 8), dpi=100)
    ax = plt.gca()

    # 绘制带偏差映射的散点图
    abs_dev = np.abs(y - x)
    sc = ax.scatter(x/1e6, y/1e6,  # 数据标准化为百万单位
                    c=abs_dev/1e6,  # 偏差颜色映射（百万单位）
                    cmap='Reds', 
                    alpha=0.7,
                    edgecolors='w',
                    linewidth=0.5,
                    vmin=0, 
                    vmax=200)  # 颜色范围根据数据分布调整

    # 绘制1:1参考线（扩展至数据最大值）
    max_val = max(x.max(), y.max())/1e6 + 100
    ax.plot([0, max_val], [0, max_val], 'k--', lw=1.5, label='1:1 Reference')

    # 计算回归统计量
    slope, intercept, r_value, *_ = stats.linregress(x, y)
    # reg_line = (slope * x + intercept)/1e6
    # ax.plot(x/1e6, reg_line, color='#333333', lw=1.5, 
    #         label=f'Regression (R² = {r_value**2:.4f})')

    # 设置坐标轴
    ax.set_xlim(80, max_val)
    ax.set_ylim(80, max_val)
    ax.set_xlabel('Measured Value (×10⁶ number/m²)', fontsize=12)
    ax.set_ylabel('Predicted Value (×10⁶ number/m²)', fontsize=12)

    # 添加统计标注框
    stats_text = f"""statistics parameters:
    n = {156}
    R² = {r_value**2:.4f}
    MAE = {np.mean(abs_dev)/1e6:.2f}×10⁶
    Max Dev = {abs_dev.max()/1e6:.2f}×10⁶"""

    ax.text(0.05, 0.95, stats_text,
            transform=ax.transAxes,
            va='top', ha='left',
            linespacing=1.8,
            fontsize=11,
            bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

    # 添加专业颜色条
    cbar = plt.colorbar(sc)
    cbar.set_label('Absolute Deviation (×10⁶ number/m²)', 
                rotation=270, 
                labelpad=20,
                fontsize=12)

    # 优化显示效果
    ax.grid(True, linestyle='--', alpha=0.4)
    ax.tick_params(axis='both', which='major', labelsize=10)
    plt.tight_layout()

    plt.show()

def area():
    list = [10.76359422,52.77526706,58.87253876,61.614146,63.99071466,67.16704485,67.53987568,69.41609846,70.82378675,75.6386837,77.41539517,77.41780281,78.41440211,79.41303354,83.79016486,88.70250289,91.34364788,91.6474664,97.55135655,103.139562,104.7045274,105.3206504,107.2381487,107.8174005,110.588992,111.5703655,129.23686,130.4614648,133.9746141,137.2422118,137.2700632,139.1228838,139.7439933,143.2803802,145.5156021,146.8505926,147.6213597,147.8616824,148.3072443,148.9302702,150.0981656,150.3263809,150.538931,150.9716604,151.2831953,151.5589504,154.3938012,155.8506818,155.9371652,155.9941216,157.1105502,158.0609552,158.5695819,159.6350883,160.9812658,162.3793024,163.0161399,164.5604976,165.7374308,166.9920721,167.9753746,169.5264757,169.942785,172.4908779,175.4214384,175.6064304,175.930134,181.2150695,181.2573983,183.6386215,185.1074077,185.3668103,186.0174575,186.3516708,187.5534507,187.6007331,189.8337596,190.7744206,190.9355365,191.0880156,192.1495519,192.464382,193.1652147,194.8716598,194.9272027,197.1141334,199.809538,199.8114897,202.9627751,205.3635722,205.7413125,206.7526635,208.2523989,212.8624221,213.9656908,214.2004844,215.6930964,215.9269247,217.0513179,221.7144167,224.5262631,225.1782609,226.0180262,226.4931362,226.7789964,227.3884753,230.5574958,231.3161782,232.2899852,233.7823191,234.4686915,235.2248667,235.5215079,236.2120498,236.6220181,237.0718328,237.9853369,238.4494895,238.4553528,238.4779057,238.495484,239.8087006,242.316553,243.8527896,248.8592252,250.486477,255.5304395,264.1133338,265.8643507,266.3590449,266.6618264,269.4728649,270.0806273,270.1920939,270.8804693,272.8187945,272.82399,274.0173123,275.3664645,275.4592107,276.6062853,278.4392552,280.2286053,282.1416356,283.0254508,284.8734112,287.5815926,288.0487722,292.3746315,295.519578,297.0344982,297.130235,297.8383165,299.1508843,299.4714251,302.2069498,307.5820083,310.4992411,312.1491383,314.0555121,319.4133184,319.940815,320.6364475,323.1761617,325.2980437,327.8764924,333.6834511,348.8530899,350.573938,353.9145975,355.525131,356.0933569,364.9473653,373.6339923,374.2813985,376.0044365,378.1400224,379.5387793,383.6580844,386.1272682,387.4926374,398.9549593,401.6774873,402.0182443,402.0762219,405.5632144,410.4564227,412.974593,418.0154532,435.6383192,507.0669163]
    new_list=[8.911922567305359, 58.1024131425648, 25.82274543730907, 81.92645839200004, 68.21926146615931, 88.79113530955827, 86.74810355813972, 76.90698982238243, 82.223296607526, 107.02143570303654, 63.581932541712746, 96.75834780926482, 74.42966568791631, 59.19488837785006, 90.04001612365455, 67.01142279610336, 147.94569342270046, 97.00945677749924, 124.37143101823722, 130.16861570180964, 129.58035102391295, 141.48628285993766, 35.38291473926459, 91.74815714344533, 137.59106388844745, 78.53331891204441, 155.07921308871093, 105.06394611985371, 102.2182648386125, 137.8715248614274, 120.63294199068639, 105.68204293486549, 126.24670826449574, 192.220550398971, 128.28680847964102, 200.97688035260276, 127.24822118525812, 140.8538098525257, 127.6985653048718, 122.72491681489889, 114.31550961654216, 144.04164387663639, 188.70433813662103, 120.98143185493467, 196.26218060373887, 118.41441981270432, 203.64079967124744, 144.5151970842315, 159.19014319518521, 153.97686535193432, 210.64086253444452, 136.76456135188863, 153.54263397246726, 145.7107786405025, 124.03696277137571, 174.71777381630912, 195.39083481145886, 200.84988051071826, 32.2158276443746, 121.48774041977111, 178.38541196714442, 161.02246545336203, 170.15243681085434, 183.65757218233566, 177.07253003573862, 234.95332680701478, 139.27808728157794, 154.76195946753967, 310.22148774330742, 236.89819402512904, 164.32825676932902, 162.54229060270495, 216.62701245839634, 183.7645289997037, 179.70530243265407, 200.9314700898722, 209.0561732085344, 182.96155908228047, 198.77093177769817, 256.7158691816755, 210.50111508277044, 164.10309582537158, 197.09528316020578, 194.76067913005375, 230.64101852675512, 177.1969423902086, 210.96767135211928, 231.86435250498266, 205.35644565263703, 250.59652905947812, 267.7794202394025, 255.31269611795364, 255.8127436206115, 254.5366031634482, 214.6746673891621, 218.89968943634318, 177.23974358420523, 269.2675357615028, 166.52938714924534, 251.31121034774023, 224.60084570966, 250.24601578940621, 170.6096333484572, 245.00113828494867, 280.85373527141604, 278.19874273613135, 201.164836973863, 278.0238175739893, 299.7918017310143, 165.3289397162596, 303.0274214335684, 219.26445487305025, 184.89760973612889, 203.4539156810061, 229.09289483845143, 316.80339205449417, 245.1456940470893, 321.8159298838782, 243.14107512843094, 287.2059719401128, 292.31718206383874, 232.06228616554836, 198.1387278467443, 266.5989082083302, 326.5277567716198, 187.59987410767198, 323.6255422311406, 295.24822833983967, 312.44244773419047, 212.38991061522958, 193.65792181077, 209.35781124454653, 293.3958713419224, 230.3347955940821, 287.542448626639, 205.15230879450021, 257.62465034576786, 217.39045374026134, 313.41016876464204, 295.90636818721987, 294.6584734886835, 262.3582715234879, 317.9816076912302, 222.09071500524837, 314.24474514956887, 283.41394008619875, 259.8212953360803, 258.3706687182977, 337.91201733629646, 212.1933410503193, 265.71005450654167, 282.00057483196014, 337.2088938976004, 337.8031515559285, 389.32469889717373, 394.88318767923823, 378.9846352330983, 280.3237329401918, 398.3440764538444, 229.44370255241455, 396.05801500205285, 317.53935616401617, 353.3679953403424, 422.99255340175125, 243.568775737845, 233.43909488751544, 433.7384662582441, 442.8423389493257, 365.0831178557009, 274.5480802003157, 364.9796065677132, 361.8647945851562, 303.6558550230257, 277.94638575194307, 408.6957684337275, 446.82388069949434, 452.0246198134297, 310.9779646994834, 379.10947836470245, 431.2691132809826, 301.09681984800994, 372.3187886751794, 463.60868778028373, 490.8470906847039, 284.4866893596029, 378.8968395281452, 469.88209917833166, 328.2610062086337, 429.33774688086265, 416.81634058982576, 558.8759481361395]
    x=np.array(list)
    y=np.array(new_list)
    plt.figure(figsize=(10, 8), dpi=100)
    ax = plt.gca()

    # 绘制带偏差映射的散点图
    abs_dev = np.abs(y - x)
    sc = ax.scatter(x, y,  # 数据标准化为百万单位
                    c=abs_dev,  # 偏差颜色映射（百万单位）
                    cmap='Reds', 
                    alpha=0.7,
                    edgecolors='w',
                    linewidth=0.5,
                    vmin=0, 
                    vmax=200)  # 颜色范围根据数据分布调整

    # 绘制1:1参考线（扩展至数据最大值）
    max_val = max(x.max(), y.max()) + 100
    ax.plot([0, max_val], [0, max_val], 'k--', lw=1.5, label='1:1 Reference')

    # 计算回归统计量
    slope, intercept, r_value, *_ = stats.linregress(x, y)
    # reg_line = (slope * x + intercept)/1e6
    # ax.plot(x/1e6, reg_line, color='#333333', lw=1.5, 
    #         label=f'Regression (R² = {r_value**2:.4f})')

    # 设置坐标轴
    ax.set_xlim(80, max_val)
    ax.set_ylim(80, max_val)
    ax.set_xlabel('Measured Value (um²)', fontsize=12)
    ax.set_ylabel('Predicted Value (um²)', fontsize=12)

    # 添加统计标注框
    stats_text = f"""statistics parameters:
    n = {156}
    R² = {r_value**2:.4f}
    MAE = {np.mean(abs_dev):.2f}
    Max Dev = {abs_dev.max():.2f}"""

    ax.text(0.05, 0.95, stats_text,
            transform=ax.transAxes,
            va='top', ha='left',
            linespacing=1.8,
            fontsize=11,
            bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

    # 添加专业颜色条
    cbar = plt.colorbar(sc)
    cbar.set_label('Absolute Deviation (um²)', 
                rotation=270, 
                labelpad=20,
                fontsize=12)

    # 优化显示效果
    ax.grid(True, linestyle='--', alpha=0.4)
    ax.tick_params(axis='both', which='major', labelsize=10)
    plt.tight_layout()

    plt.show()

if __name__ == '__main__':
   area() 